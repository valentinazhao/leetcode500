[字符串切割](https://leetcode.com/problems/word-break/description/)

```
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false
```

```
这题还是有很多解法，比如recursive + memorization, 或者bfs.
```

Time: O(n^2) Space: O(n)
```java
public class Solution {
    public boolean wordBreak(String s, List<String> dict) {
        // DP
        int n = s.length();
        boolean[] dp = new boolean[n + 1];
        dp[0] = true;
        
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] && dict.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        
        return dp[n];
    }
}
```


```
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]
Example 2:

Input:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
Output:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
Output:
[]
```

```

s = "catsanddog"
dict = ["cat", "cats", "and", "sand", "dog"]

c a t s a n d d o g
0 1 2 3 4 5 6 7 8 9

A solution is ["cats and dog", "cat sand dog"]

start: 0
end: 3 -> dfs 
     start: 3 map: 3 "sand dog"
     end: 7 -> dfs
           start: 7  map: "dog"
           end: 10 
           
           
Time: O(n^3)
Space: O(n^3) - ??
           

```


```java
class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
        Map<Integer, List<String>> map = new HashMap<>();
        helper(s, wordDict, 0, map);
        return map.get(0);
    }
    private List<String> helper(String s, List<String> dict, int idx, Map<Integer, List<String>> map) {
        if (map.containsKey(idx)) {
            return map.get(idx);
        }
        List<String> list = new LinkedList<>();
        if (idx == s.length()) {
            list.add("");
            return list;
        }
        
        for (int i = idx + 1; i <= s.length(); i++) {
            String t = s.substring(idx, i);
            if (dict.contains(t)) {
                List<String> temp = helper(s, dict, i, map);
                for (String str: temp) {
                    list.add(t + (str.equals("")? "" : " ") + str);
                }
            }
        }
        
        map.put(idx, list);
        
        return list;
    }
}
```
